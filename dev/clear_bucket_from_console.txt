// Clear bucket from sbt console

import java.io.ByteArrayInputStream

import scala.collection.JavaConversions._
import scala.io.Source
import scala.util.control.NonFatal

import com.amazonaws.{AmazonClientException, AmazonServiceException}
import com.amazonaws.{ClientConfiguration, Protocol}
import com.amazonaws.auth.BasicAWSCredentials
import com.amazonaws.services.s3.AmazonS3Client
import com.amazonaws.services.s3.model.{Bucket, GetObjectRequest, ListObjectsRequest, ObjectMetadata, PutObjectRequest}

import com.typesafe.config.{Config, ConfigFactory}


val config = new ClientConfiguration();
  config.withProtocol(Protocol.HTTP)
  config.setProxyHost("localhost")
  config.setProxyPort(8080)

val accessKeyId = "831ea1f85c6bb307895b"                          //accessKeyId here
val secretAccessKey = "4162674cc84583136b546ee3eb934f75b070faba"    //secretAccessKey here

val credentials = new BasicAWSCredentials(accessKeyId, secretAccessKey)
val s3 = new AmazonS3Client(credentials, config);

def lookupBucket(name: String): Option[Bucket] = {
    val buckets = s3.listBuckets()
    buckets.toList.find { b => b.getName == name }
}

var bucket: Bucket = {
  lookupBucket("xitrum-leochat").getOrElse {
    try {
      s3.createBucket("xitrum-leochat")
    } catch {
      case NonFatal(e) =>
        // logger.error("Could not create bucket", e)
        throw e
        null
    }
  }
}

def read(key: String): Option[String] = {
  try {
    val v = s3.getObject(new GetObjectRequest(bucket.getName, key))
    val content = v.getObjectContent()
    Some(Source.fromInputStream(content).getLines.mkString(""))
  } catch {
    case NonFatal(e) =>
      None
  }
}

val objectListing = s3.listObjects(new ListObjectsRequest().withBucketName(bucket.getName()))

objectListing.getObjectSummaries().toList.foreach { meta => println(meta.getKey() + " : " + read(meta.getKey).getOrElse(""))}

//objectListing.getObjectSummaries().toList.foreach { meta => s3.deleteObject(bucket.getName(),meta.getKey())}

